import java.awt.Point;

public class Sorted2DArraySearch {

	/**
	 * This method verifies that a 2D array is sorted,
	 * meaning that each row and column is non-decreasing.
	 * 
	 * @param array Array of Comparable objects
	 * @return True if the array is sorted, false otherwise
	 */
	public static <T extends Comparable<T>> boolean verifySorted(T[][] array) {
		// Make sure each row is non-decreasing
		for(int i = 0; i < array.length; i++) {
			for(int j = 0; j < array[0].length - 1; j++) {
				// Return false if a value in a row is less than the value preceding it
				if(array[i][j+1].compareTo(array[i][j]) < 0) {
					return false;
				}
			}
		}
		// Make sure each column is non-decreasing
		for(int j = 0; j < array[0].length - 1; j++) {
			for(int i = 0; i < array.length; i++) {
				// Return false if a value in a column is less than the value preceding it
				if(array[i][j+1].compareTo(array[i][j]) < 0) {
					return false;
				}
			}
		}
		// All rows and columns were sorted, so return true
		return true;
	}

	/**
	 * Return midpoint between two values.
	 * It must be the case that first <= last.
	 * 
	 * @param first Lower value
	 * @param last Upper value
	 * @return Midpoint between first and last
	 */
	private static int midpoint(int first, int last) {
		if(first > last) throw new IllegalArgumentException(first + " greater than " + last);
		return first + (last - first) / 2;
	}	

	/**
	 * This method can check if you have defined an inappropriate
	 * sub-region within a 2D array. It is assumed that array is
	 * a rectangular 2D array (not jagged).
	 * 
	 * @param array Array is provided so that knowledge of its size is available.
	 * @param startX Starting row of sub-region
	 * @param startY Starting column of sub-region
	 * @param endX Ending row of sub-region
	 * @param endY Ending column of sub-region
	 * @return False if the sub-region is within bounds and the region has its starting
	 *         bounds before its ending bounds, true otherwise.
	 */
	private static <T> boolean invalidSubRegion(T[][] array, int startX, int startY, int endX, int endY) {
		return startX < 0 || startY < 0 || endX < 0 || endY < 0 ||
				startX >= array.length || endX >= array.length || startY >= array[0].length || endY >= array[0].length ||
				startX > endX || startY > endY;
	}

	/**
	 * This is the kick-off method for a recursive approach to searching a sorted 2D array
	 * by quadrants. The recursive method checks the center of a designated region, and
	 * then recursively searches three quadrants of that region if the sought value was
	 * not found. The details of this implementation are in the assignment description.
	 * 
	 * @param array 2D array of Comparable objects.
	 * @param value Value to search for in the array.
	 * @return True if the value is found, false otherwise.
	 */
	public static <T extends Comparable<T>> boolean threeQuadrantSubSearch(T[][] array, T value) {
		return threeQuadrantSubSearch(array, 0, array.length-1, 0, array[0].length-1, value);
	}
	/**
	 * Search the array by dividing the array up into three quadrants and recursively searching each quadrant in the same way
	 *  until the value is located or there is no more spots left to search in a quadrant.
	 * @param array The 2d array being searched
	 * @param startRow The beginning row of the searched area
	 * @param endRow The ending row of the searched area
	 * @param startColumn The beginning column of the searched area
	 * @param endColumn The ending column of the searched area
	 * @param value the value being searched for
	 * @return boolean whether the value is present or not
	 */
	private static <T extends Comparable<T>> boolean threeQuadrantSubSearch(T[][] array, int startRow, int endRow, int startColumn, int endColumn, T value) {
		//Base case: the region defined by the method is invalid, return false
		if(invalidSubRegion(array, startRow, startColumn, endRow, endColumn)) {
			return false;
		}
		//Locate midpoints for the row and column
		int midRow = midpoint(startRow, endRow);
		int midColumn = midpoint(startColumn, endColumn);
		//If the value at the midRow, midColumn coordinate equal the value to be searched for, return true
		if(array[midRow][midColumn].equals(value)) {
			return true;
		}
		//Base case: if the startRow and startColumn equal their respective counterparts, return false. This means that there is nothing 
		//left to search in that quadrant
		if(startRow == endRow && startColumn == endColumn)
			return false;
		//Recursive case: If the midpoint value is less than the value being searched for, search the top right, bottom left, and bottom right quadrants
		else if(array[midRow][midColumn].compareTo(value) < 0) {
			//top right (Q2)
			return threeQuadrantSubSearch(array, startRow, midRow, midColumn+1,endColumn, value) || 
					//bottom left(Q3)
					threeQuadrantSubSearch(array, midRow+1, endRow, startColumn, midColumn, value)||
					//bottom right(Q4)
					threeQuadrantSubSearch(array, midRow+1, endRow, midColumn+1,endColumn, value);
		}
		//Recursive case: If the midpoint value is greater than the value being searched for, search the top right, bottom left, and top left quadrants
		else{
			//bottom left(Q1)
			return threeQuadrantSubSearch(array, startRow, midRow, startColumn, midColumn, value)|| 
					//Top right (Q2)
					threeQuadrantSubSearch(array, startRow, midRow, midColumn+1,endColumn, value) ||
					//Top left(Q3)
					threeQuadrantSubSearch(array, midRow+1, endRow, startColumn, midColumn, value);

		}

	}

	/**
	 * This iterative search progresses from the lower-left corner of
	 * a sorted 2D array to the upper-right corner of the array. The 
	 * search path is a zig-zag, but the exact path depends on how
	 * the encountered values compare to the value being sought. Details
	 * are in the assignment description.
	 * 
	 * @param array 2D array of Comparable objects.
	 * @param value Value to search for in the array.
	 * @return True if the value is found, false otherwise.
	 */
	public static <T extends Comparable<T>> boolean zigzagSearch(T[][] array, T value) {
		//Declare variables to represent the row and column of the 2d array
		int row = array.length-1;
		int column = 0;
		//While the algorithm has not passed the upper right corner of the 2d array, search for the value
		while(row >= 0 && column <= array[row].length-1) {
			//If the value is where the algorithm is currently traversing, return true
			if(array[row][column].equals(value))
				return true;
			//Else, if the value at the current coordinates is less than the value being searched for, increment the column
			else if(array[row][column].compareTo(value) < 0) {
				column++;
			}
			//Else, if the value at the current coordinates is greater than the value being searched for, decrement the row
			else if(row>0) 
				row--;
			//If none of these conditions are true, the value is not present. Return false
			else 
				return false;
		}
		return false;
	}

	/**
	 * This helper method is needed by the next search method below. It performs a standard
	 * one-dimensional binary search along the diagonal of a sorted 2D array (since the array
	 * is sorted, its diagonal is also non-decreasing). However, instead of simply indicating
	 * whether the sought value was found, the method returns a Point, which is a convenient
	 * way to store two values. The values in the Point returned represent the row and column
	 * of the result of the binary search. Specifically, the location of the desired value
	 * is returned if it is found. If it is not found, then the returned location holds a value
	 * along the diagonal that is less than the sought value, but for which the following value
	 * on that same diagonal is greater than the sought value.
	 * 
	 * @param array 2D sorted array
	 * @param value Being searched for
	 * @param startX Starting row of sub-rectangle to search
	 * @param startY Starting column of sub-rectangle to search
	 * @param endX Ending row of sub-rectangle to search
	 * @param endY Ending column of sub-rectangle to search
	 * @return Point whose indices either contain the value, or bound it from below and above
	 */
	public static <T extends Comparable<T>> Point binarySearchDiagonal(T[][] array, T value, int startX, int startY, int endX, int endY) {
		if(startX > endX || startY > endY) { //base case: bounds overlap
			// If end point is not off the upper/left edge, it contains a point less than or equal to the value
			//			assert endX == -1 || endY == -1 || array[endX][endY].compareTo(value) <= 0;
			// If point after end point is not off the lower/right edge, it contains a point greater than the value
			//			assert endX+1 == array[0].length || endY+1 == array.length || array[endX+1][endY+1].compareTo(value) > 0;
			return new Point(endX, endY);            
		} else {
			int midpointX = midpoint(startX, endX);
			int midpointY = midpoint(startY, endY);
			if(array[midpointX][midpointY].equals(value)) { //found: return point
				return new Point(midpointX, midpointY);
			} else if(value.compareTo(array[midpointX][midpointY]) < 0) { //smaller search left
				return binarySearchDiagonal(array, value, startX, startY, midpointX - 1, midpointY - 1);
			} else{ // larger, search right
				return binarySearchDiagonal(array, value, midpointX + 1, midpointY + 1, endX, endY);
			}
		} 
	}

	/**
	 * This is the most complicated search method. This particular method is the kick-off method for
	 * a recursive procedure that recursively searches two sub-rectangles within the input array. 
	 * The particular rectangles that are searched depend on the result of performing a more-or-less
	 * standard binary search along the diagonal of the array. Details are in the assignment description.
	 * 
	 * @param array 2D array of Comparable objects.
	 * @param value Value to search for in the array.
	 * @return True if the value is found, false otherwise.
	 */
	public static <T extends Comparable<T>> boolean binarySearchDiagonalSearch(T[][] array, T value) {
		return binarySearchDiagonalSearch(array, value, 0, 0, array.length-1, array[0].length-1);
	}
	/**
	 * Recursive searching algorithm that locates a value by repeatedly using diagonals and dividing the array into sub-rectangles until
	 * the value is located or it runs out of array space to search.
	 * 
	 * Note: This method passes all tests without assertions being enabled. With assertions, it fails isolated sections of the third array.
	 * 
	 * @param array to be searched for a value
	 * @param value to be searched for
	 * @param startX the row to start searching from
	 * @param startY the column to start searching from 
	 * @param endX the row to stop searching at
	 * @param endY the column to stop searching at
	 * @return boolean whether the value is present in the 2d array or not
	 */
	private static <T extends Comparable<T>> boolean binarySearchDiagonalSearch(T[][] array, T value, int startX, int startY, int endX, int endY) {
		//Base Case: Illegal region to be searched: return false 
		if(invalidSubRegion(array, startX, startY, endX, endY)) {
			return false;
		}
		//Check if the value is at the beginning or end of the array
		if(array[startX][startY].equals(value)||array[endX][endY].equals(value)) {
			return true;
		}
		//If the beginning end column or row equal their respective counterparts, there is only a row or column left to be searched.
		//Recursively search them
		else if(startY==endY){
			return binarySearchDiagonalSearch(array, value, startX+1, startY, endX, endY);
		}
		else if(startX== endX) {
			return binarySearchDiagonalSearch(array, value, startX, startY+1, endX, endY);
		}
		//Case 1: If the value is not found, search the remaining region by making it into squares and recursively searching them
		else if((endX-startX) == (endY-startY)){
			Point p = binarySearchDiagonal(array, value, startX, startY, endX, endY);
			//If the point returned is less than the current startX or startY, the value is not present and false is returned
			if(p.x<startX || p.y<startY)
				return false;
			//If the point the search method returns is the actual value, return true
			if(array[p.x][p.y].equals(value))
				return true;
			//If p.y or p.x equal their respective counterparts, this means that only one row or column is left to search. 
			//Search this row or column recursively 
			else if(p.y==endY){
				return binarySearchDiagonalSearch(array, value, p.x+1, p.y, endX, endY);
			}
			else if(p.x== endX) {
				return binarySearchDiagonalSearch(array, value, p.x, p.y+1, endX, endY);
			}
			//Otherwise, search both regions for the value
			return binarySearchDiagonalSearch(array, value, p.x+1, startY, endX, p.y)|| binarySearchDiagonalSearch(array, value, startX, p.y+1, p.x, endY);
		}
		//Case 2: the region inputed into the method is not a square. Define a square and call this method again with those parameters and
		//call the method again on the area not included in the square
		else {
			//Determine how large the square should be
			int squareSide = Math.min((endX-startX), (endY-startY));
			//If the difference between the x parameters is less than the y parameters, the y parameters need to be modified to make a square
			if((endX-startX)<(endY-startY)) {
				//Make a square and search what is left on the second call
				int numToRemove = endY - (startY+squareSide);
				assert (endY-numToRemove)-startY == endX-startX;
				return binarySearchDiagonalSearch(array, value, startX, startY, endX, endY-numToRemove)
						|| binarySearchDiagonalSearch(array, value, startX, endY-numToRemove, endX, endY);
			}
			//If the difference between the y parameters is less than the x parameters, the x parameters need to be modified to make a square
			else if((endX-startX)>(endY-startY)) {
				int xToRemove = endX - (startX+squareSide);
				return binarySearchDiagonalSearch(array, value, startX, startY, endX-xToRemove, endY)
						|| binarySearchDiagonalSearch(array, value, startX+xToRemove, startY, endX, endY);
			}
			//Square size is 0
			else {
				return true;
			}
		}
	}
}
